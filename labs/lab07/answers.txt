
NOTE:
- Your time complexities should be expressed in big-O notation and be in
  terms of n, where n is the number of people who  have  been  added  to
  Friendbook.

===============
  FbIsFriend
===============

- Worst case time complexity: O(log n)

- Explanation: time complexity of nameToId is log n as it searches in a AVL tree.
Referring to a 2d array is O(1). For this funciton O(2log n + 1) == O(log n).

===============
FbMutualFriends
===============

- Worst case time complexity: O(n)

- Explanation: Iteration through users is O(n). Referring to array, ListAppend and 
ListNew are all O(1). So this function is O(n).

===============
 FbFriendRecs1
===============

- Worst case time complexity: O(n^2)

- Explanation: Calloc is O(n). Loop for calculating mutual friends is O(n^2) as 
FbMutualFriends is called in loop. Printing loop is also O(n^2). So time complexity
of this function is O(n^2).

===============
 FbFriendRecs2
===============

- Worst case time complexity: O(n^2)

- Explanation: Use BFS to find friends' friends and print them from closest to farest 
one by one. Time complexity of funciton is O(n^2), same with which of BFS.

